import sys

class Person(object):
	def __init__(self, name, age, health, stamina, focus, hunger, inventory):
		self.name = name
		self.age = age
		self.health = health
		self.stamina = stamina
		self.focus = focus
		self.hunger = hunger
		self.inventory = inventory
	
	def addToInventory(self, newItem):
		for ob in self.inventory:
			if(ob == newItem):
				self.inventory.ob += 1
				break
		
		else:
			self.inventory.append(newItem)
			
	def removeFromInventory(item):
		for ob in self.inventory:
			if(ob == item):
				self.inventory.remove(item)
				break
		
		else:
			print("You don't have a %s." % (str(item)))
	
class PC(Person):
	def checkInventory(self):
		print("You take a moment to check what you're carrying.")
		print("You have on you:")
		for i in self.inventory:
			if(self.inventory[i] > 1):
				print(str(self.inventory[i]) + " " + str(i) + "s")
			else:
				print(str(i))

pInv = {
		"clothing" : 1,
		"wallet" : 1,
		"shin" : 30,
		}
Player = PC("Dickbutt", 23, 100, 100, 100, 100, pInv)

class Zone(object):
	def __init__(self, name, references, description, contents, exits):
		self.name = name
		self.references = references
		self.description = description
		self.contents = contents
		self.exits = exits
		
	def examineRoom(self):
		print("You are in a " + self.description)
		
	def searchRoom(self):
		print("You search the immediate area, and you find:")
		for c in self.contents:
			print(self.contents[c])
		print("And exits to the")
		for x in self.exits:
			print(x)
				
	def addItem(self, item):
		for i in self.contents:
			if(item == i):
				self.contents[i] += 1
		
		else:
			self.contents.append(item)
	
	def removeItem(self, item):
		for i in self.contents:
			if(item == i):
				self.contents.remove(i)
		
		else:
			print("There isn't a %s here." % (str(item)))

			
TestRoomReferences = ["room", "area", "surroundings", "zone",]
TestRoomDescription = "a small and uninteresting room. You don't remember how you got here, or even what this place is but you know it's the beginning of something much larger than you."
TestRoomContents = {
	"light" : {"a Light" : 1},
	"box" : {"a Box" : 1},
	"cloth" : {"a piece of Cloth" : 1},
	}
TestRoomExits = ["south",]
TestRoom = Zone("Test Room", TestRoomReferences, TestRoomDescription, TestRoomContents, TestRoomExits)

class Item(object):
	def __init__(self, name, description):
		self.name = name
		self.description = description
		
	def describeItem(self):
		print("It's %s" % (self.description))

light = Item("a Light", "a small, dull lightbulb hanging from the ceiling by a thin cord.")
box = Item("a Box", "a wooden crate, covered in dust. It looks old, and has hinges on the back edge.")
cloth = Item("a piece of Cloth", "a small piece of dirty, off white cloth, smelling slightly of alcohol. Maybe, beer?")
clothing = Item("a simple outfit", "a simple outfit of various materials. It is far from fancy, or comfortable, but it is sufficient.")
wallet = Item("a small leather Wallet.", "a small and worn wallet made of leather, or maybe fake leather. It smells of dust.")
shin = Item("a Shin", "a shiny stick of metal and plastic, containing money.")

##COMMAND CLASS GOES HERE

Commands = ["search", "examine", "inventory", "quit", "help",]

def ChangeLocation(oldLocation, newLocation, Character):
	print("You step out of the " + oldLocation.name + " and into " + newLocation.name + ", " + newLocation.description)
	Scene(newLocation, Player)

def Scene(Location, Character):##===================This is the active function at all times. Pretty much will have to ave its own rolling dictionary of everything.
	cmd = input(">>>")
	
	if(cmd.lower() == "search"):
		Location.searchRoom()
		Scene(Location, Character)
	if(cmd.lower() == "examine"):
		cmd = input("Examine what? >>>")
		
		for i in Location.references:
			if(cmd.lower() == i):
				Location.examineRoom()
				Scene(Location, Character)
				
		else:
			for i in Location.contents:
				if(cmd.lower() == i):
					stringToClass(i).describeItem()
					if(Location.contents[i] > 1):
						print("There are " + str(Location.contents[i] + " of them."))
					Scene(Location, Character)
			else:
				for i in Player.inventory:
					if(cmd.lower() == i):
						stringToClass(i).describeItem()
						if(Player.inventory[i] > 1):
							print("You are carrying " + str(Player.inventory[i]) + " of them.")
						Scene(Location, Character)
				else:
					print("You don't see a %s here." % (cmd))
					Scene(Location, Character)
				
		
	if(cmd.lower() == "quit" or cmd.lower() == "exit"):
		cmd = input("Are you sure you want to quit?")
		
		if(cmd.lower() == "y" or cmd.lower() == "yes"):
			print("Shutting Down...")
			sys.exit()
			
		else:
			Scene(Location, Character)
	
	if(cmd.lower() == "inventory" or cmd.lower() == "inv"):
		Player.checkInventory()
		Scene(Location, Character)
			
	if(cmd.lower() == "help" or cmd.lower() == "commands"):
		print("Available Commands:")
		for c in Commands:
			print(c)
		Scene(Location, Character)
			
	else:
		print("Command not recognised.")
		Scene(Location, Character)
		
def Examine(Location, Character):
	cmd = input("Examine what?>>>")

	for r in Location["References"]:
		if(cmd.lower() == r):
			print("You're in " + Location["Description"])
			Scene(Location, Character)
			
		for i in Location["Contents"]:
			if(cmd.lower() == i):
				print("It's " + Items[cmd]["examine"])
				Scene(Location, Character)
			
		else:
			print("There isn't a " + cmd + " here.")
			Scene(Location, Character)

def Search(Location, Character):##===============The search command. 
	cmd = input("Search what?>>>")
	for r in Location["References"]:
		if(cmd.lower() == r):
			print("You look around the immediate area. You see: ")
			
			for i in Location["Contents"]:
				print(Location["Contents"][i] + ", ")
				
			print("And exits to the:")
			
			for x in Location["Exits"]:
				print(x)
				
			Scene(Location, Player)

def boot():##=========================Just the boot screen
	print("ITER: The Journey.")
	print("Coming Soon.")
	print("Type your name to enter the test room.")
	cmd = input(">>>")
	Player.name = cmd
	print("Welcome %s." % (Player.name))
	ChangeLocation(TestRoom, TestRoom, Player)

def stringToClass(str):##This is meant to turn strings into class names.
	return getattr(sys.modules[__name__], str)
	
boot()##====================the only base level command if at all possible.
